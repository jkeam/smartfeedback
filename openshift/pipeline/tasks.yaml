apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-update-deployment
  labels:
    app.kubernetes.io/version: '0.2'
    operator.tekton.dev/provider-type: community
spec:
  description: >-
    This Task can be used to update image digest in a Git repo using kustomize.
    It requires a secret with credentials for accessing the git repo.
  params:
    - name: GIT_REPOSITORY
      type: string
    - name: GIT_REF
      type: string
    - name: CURRENT_IMAGE
      type: string
    - name: NEW_IMAGE
      type: string
    - name: NEW_DIGEST
      type: string
    - name: KUSTOMIZATION_PATH
      type: string
  results:
    - description: The commit SHA
      name: commit
      type: string
  steps:
    - image: 'docker.io/alpine/git:v2.26.2'
      name: git-clone
      resources: {}
      script: >
        rm -rf git-update-digest-workdir

        git clone $(params.GIT_REPOSITORY) -b $(params.GIT_REF)
        git-update-digest-workdir
      workingDir: $(workspaces.workspace.path)
    - image: 'quay.io/wpernath/kustomize-ubi:latest'
      name: update-digest
      resources: {}
      script: >
        cd git-update-digest-workdir/$(params.KUSTOMIZATION_PATH)

        kustomize edit set image
        $(params.CURRENT_IMAGE)=$(params.NEW_IMAGE)@$(params.NEW_DIGEST)


        echo "##########################"

        echo "### kustomization.yaml ###"

        echo "##########################"

        cat kustomization.yaml
      workingDir: $(workspaces.workspace.path)
    - image: 'docker.io/alpine/git:v2.26.2'
      name: git-commit
      resources: {}
      script: |
        cd git-update-digest-workdir

        git config user.email "tektonbot@redhat.com"
        git config user.name "My Tekton Bot"

        git status
        git add $(params.KUSTOMIZATION_PATH)/kustomization.yaml
        git commit -m "[ci] Image digest updated"

        git push

        RESULT_SHA="$(git rev-parse HEAD | tr -d '\n')"
        EXIT_CODE="$?"
        if [ "$EXIT_CODE" != 0 ]
        then
          exit $EXIT_CODE
        fi
        # Make sure we don't add a trailing newline to the result!
        echo -n "$RESULT_SHA" > $(results.commit.path)
      workingDir: $(workspaces.workspace.path)
  workspaces:
    - description: The workspace consisting of maven project.
      name: workspace

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: image-tag-to-digest
  labels:
    app.kubernetes.io/version: '0.2'
    operator.tekton.dev/provider-type: community
spec:
  params:
    - description: The location of the image without the tag
      name: image_dest_url
      type: string
    - description: the tag of the image to return the hash for
      name: image_dest_tag
      type: string
  results:
    - description: The digest for the image created
      name: image_digest
      type: string
  steps:
    - image: 'quay.io/gnunn/tools:4.10-1'
      name: get-image-digest
      resources: {}
      script: >
        #!/usr/bin/env bash

        DIGEST=$(skopeo inspect
        docker://$(params.image_dest_url):$(params.image_dest_tag) | jq -r
        .Digest)

        echo "Digest for image $(params.image_dest_url):$(params.image_dest_tag)
        is '${DIGEST}'"

        echo -n "$DIGEST" > $(results.image_digest.path)

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sendmail
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Messaging
    tekton.dev/tags: mail
    tekton.dev/displayName: "send mail"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
spec:
  description: >-
    This task sends a simple email to receivers via SMTP server
  params:
  - name: server
    type: string
    description: secret name for SMTP server information (url, port, password)
  - name: subject
    type: string
    description: plain text email subject
  - name: body
    type: string
    description: plain text email body
  - name: sender
    type: string
    description: sender email address
  - name: recipients
    type: string
    description: recipient email addresses (space delimited list)
  steps:
  - name: send
    image: docker.io/library/python:3.8-alpine@sha256:e11bbd37d4371894e954421b85dbe8dd4eb7198d7cb4ed144ab529f19f57c3f1 #tag: 3.8-alpine
    script: |
      #!/usr/bin/env python3

      import smtplib, ssl, os
      port = os.getenv('PORT')
      smtp_server = os.getenv('SERVER')
      sender_email = "$(params.sender)"
      receiver_emails = "$(params.recipients)"
      user = os.getenv('USER')
      password = os.getenv('PASSWORD')
      tls = os.getenv('TLS')
      message = f"""\
      Subject: $(params.subject)
      To: {receiver_emails}
      From: {sender_email}

      $(params.body)"""
      print(message)
      if tls == 'True':
          context = ssl.create_default_context()
          server = smtplib.SMTP_SSL(smtp_server, port, context=context)
      else:
          server = smtplib.SMTP(smtp_server, port)
      if password != '':
          server.login(user, password)
      for receiver in [item for item in receiver_emails.split(' ') if item]:
          server.sendmail(sender_email, receiver, message.encode('utf-8'))
      server.quit()
    env:
    - name: USER
      valueFrom:
        secretKeyRef:
          name: $(params.server)
          key: user
    - name: PASSWORD
      valueFrom:
        secretKeyRef:
          name: $(params.server)
          key: password
    - name: TLS
      valueFrom:
        secretKeyRef:
          name: $(params.server)
          key: tls
    - name: SERVER
      valueFrom:
        secretKeyRef:
          name: $(params.server)
          key: url
    - name: PORT
      valueFrom:
        secretKeyRef:
          name: $(params.server)
          key: port

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: wget
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: CLI
    tekton.dev/tags: download
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This task uses wget to download files from the internet to a workspace.
  params:
  - name: url
    description: The url we want to download file from
    type: string
    default: ""
  - name: diroptions
    description: The directory path we want to save file to
    type: array
    default: []
  - name: options
    description: The arguments to pass to wget
    type: array
    default: []
  - name: filename
    description: The filename we want to change our file to
    type: string
    default: ""
  - name: wget-option
    description: The wget docker image to be used
    type: string
    default: "docker.io/library/buildpack-deps:stable-curl@sha256:3d5e59c47d5f82a769ad3f372cc9f86321e2e2905141bba974b75d3c08a53e8e" #tag: stable-curl
  workspaces:
  - name: wget-workspace
    description: The folder where we write the wget'ed file to
  steps:
  - name: wget
    image: "$(params.wget-option)"
    command: [wget]
    args: ["$(params.options[*])", "$(params.url)", "$(params.diroptions[*])", "$(workspaces.wget-workspace.path)/$(params.filename)"]

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: django-test
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: "Build Tools"
    tekton.dev/tags: "build-tool, python, django"
    tekton.dev/displayName: "django test"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
spec:
  description: This task runs Django tests.
  params:
  - name: DEBUG
    type: string
    description: Debug flag
    default: "True"
  - name: DJANGO_SECRET_KEY
    type: string
    description: Secret key
    default: "django-insecure-#zd522dfd9)ce1j4*-lj%t@r$syze#@+$(9j89td=@+t8d)!k+"
  - name: DB_NAME
    type: string
    description: Database name
    default: "feedback"
  - name: DB_USER
    type: string
    description: Database username
    default: "postgres"
  - name: DB_PASSWORD
    type: string
    description: Database password
    default: "adminpassword"
  - name: DB_HOST
    type: string
    description: Database host
    default: "db"
  - name: DB_PORT
    type: string
    description: Database port
    default: "5432"
  - name: ALLOWED_HOSTS
    type: string
    description: Allowed hosts
    default: "*"
  - name: REDIS_URL
    type: string
    description: Redis URL
    default: "redis://localhost:6379"
  workspaces:
  - name: source
  steps:
  - name: build
    image: registry.access.redhat.com/ubi9/python-312:1-20.1722518948
    workingDir: $(workspaces.source.path)
    script: |
      pip install -r ./requirements.txt
      python ./manage.py migrate
      python ./manage.py test
    env:
    - name: PYTHONDONTWRITEBYTECODE
      value: "1"
    - name: PYTHONUNBUFFERED
      value: "1"
    - name: DEBUG
      value: "$(params.DEBUG)"
    - name: DJANGO_SECRET_KEY
      value: "$(params.DJANGO_SECRET_KEY)"
    - name: DB_NAME
      value: "$(params.DB_NAME)"
    - name: DB_USER
      value: "$(params.DB_USER)"
    - name: DB_PASSWORD
      value: "$(params.DB_PASSWORD)"
    - name: DB_HOST
      value: "$(params.DB_HOST)"
    - name: DB_PORT
      value: "$(params.DB_PORT)"
    - name: ALLOWED_HOSTS
      value: "$(params.ALLOWED_HOSTS)"
    - name: REDIS_URL
      value: "$(params.REDIS_URL)"

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: linter
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Code Quality
    tekton.dev/tags: python, flake8, precommit, linter
    tekton.dev/displayName: linter
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task will run the precommit hooks.
  workspaces:
    - name: source
  steps:
  - name: precommit-hook
    image: registry.access.redhat.com/ubi9/python-312:1-20.1722518948
    workingDir: $(workspaces.source.path)
    script: |
      pip install -r ./requirements.txt
      git config --global --add safe.directory /workspace/source
      pre-commit install-hooks
      pre-commit run -a
    env:
    - name: PYTHONDONTWRITEBYTECODE
      value: "1"
    - name: PYTHONUNBUFFERED
      value: "1"

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: run-db
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: "Developer Tools"
    tekton.dev/tags: database, db, postgres
    tekton.dev/displayName: run-db
    tekton.dev/platforms: "linux/amd64"
spec:
  description: This task will run a database
  params:
    - name: POSTGRESQL_ADMIN_PASSWORD
      type: string
      default: adminpassword
    - name: POSTGRESQL_DATABASE
      type: string
      default: feedback
    - name: POSTGRESQL_PASSWORD
      type: string
      default: feedbackpassword
    - name: POSTGRESQL_USER
      type: string
      default: feedbackuser
    - name: DB_NAME
      type: string
  results:
    - description: The DB Name
      name: deployment
      type: string
  steps:
  - name: start-db
    image: "quay.io/openshift/origin-cli:4.12"
    script: |
      #!/usr/bin/env bash

      oc new-app --name=$(params.DB_NAME)-redis --image=registry.redhat.io/rhel9/redis-7:1-27 --labels 'app=$(params.DB_NAME)-redis'
      oc new-app --name=$(params.DB_NAME) --image=registry.redhat.io/rhel9/postgresql-15:1-74 --env POSTGRESQL_ADMIN_PASSWORD=$POSTGRESQL_ADMIN_PASSWORD --env POSTGRESQL_DATABASE=$POSTGRESQL_DATABASE --env POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD --env POSTGRESQL_USER=$POSTGRESQL_USER --env POSTGRESQL_DATABASE=feedback --labels 'app=$(params.DB_NAME)'
      echo -n "$DB_NAME" > $(results.deployment.path)
    env:
    - name: POSTGRESQL_ADMIN_PASSWORD
      value: "$(params.POSTGRESQL_ADMIN_PASSWORD)"
    - name: POSTGRESQL_DATABASE
      value: "$(params.POSTGRESQL_DATABASE)"
    - name: POSTGRESQL_PASSWORD
      value: "$(params.POSTGRESQL_PASSWORD)"
    - name: POSTGRESQL_USER
      value: "$(params.POSTGRESQL_USER)"
  - name: wait-for-db
    image: registry.redhat.io/rhel9/postgresql-15:1-74
    script: |
      #!/usr/bin/env bash

      # TODO: better way for wait for db
      sleep 30

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: destroy-db
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: "Developer Tools"
    tekton.dev/tags: database, db, postgres
    tekton.dev/displayName: run-db
    tekton.dev/platforms: "linux/amd64"
spec:
  description: This task will destroy a database
  params:
    - name: DB_NAME
      type: string
  steps:
  - name: stop-db
    image: "quay.io/openshift/origin-cli:4.12"
    script: |
      #!/usr/bin/env bash

      oc delete deployment -l app="$(params.DB_NAME)"
      oc delete service -l app="$(params.DB_NAME)"
      oc delete imagestream -l app="$(params.DB_NAME)"

      oc delete deployment -l app="$(params.DB_NAME)-redis"
      oc delete service -l app="$(params.DB_NAME)-redis"
      oc delete imagestream -l app="$(params.DB_NAME)-redis"
